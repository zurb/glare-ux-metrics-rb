module Glare
  module UxMetrics
    class Error < StandardError
    end

    module Sentiment
      class Parser
        CHOICE_KEYS: Array[String]
        attr_reader choices: Hash[::Symbol | ::String, ::String | ::Float | ::Integer]

        def initialize: (choices: Hash[::Symbol | ::String, ::String | ::Float | ::Integer]) -> void

        def valid?: -> bool

        def parse: -> Result

        @result: Float
        def result: -> Float

        @threshold: String
        def threshold: -> String

        class InvalidDataError < Error
          def correct_data: -> String
        end
      end
    end

    module Feeling
      class Parser
        CHOICE_KEYS: Array[String]
        attr_reader choices: Hash[::Symbol | ::String, ::String | ::Float | ::Integer]

        def initialize: (choices: Hash[::Symbol | ::String, ::String | ::Float | ::Integer]) -> void

        def valid?: -> bool

        def parse: -> Result

        class InvalidDataError < Error
          def correct_data: -> String
        end
      end
    end

    module Expectations
      class Parser
        CHOICE_KEYS: Array[String]
        SENTIMENT_KEYS: Array[String]
        attr_reader choices: Hash[::Symbol | ::String, ::String | ::Float | ::Integer]
        attr_reader sentiment: Hash[::Symbol | ::String, ::String | ::Float | ::Integer]
        attr_accessor result: Float
        attr_accessor label: String

        def initialize: (
            choices: Hash[::Symbol | ::String, ::String | ::Float | ::Integer],
            sentiment: Hash[::Symbol | ::String, ::String | ::Float | ::Integer]) -> void

        def valid?: -> bool

        def parse: -> Result

        class InvalidDataError < Error
          def correct_data: -> String
        end
      end
    end

    module Desirability
      class Parser
        CHOICE_KEYS: Array[String]
        attr_reader questions: Array[Hash[::Symbol | ::String, ::String | ::Float | ::Integer]]

        def initialize: (
          questions: Array[Hash[::Symbol | ::String, ::String | ::Float | ::Integer]]
        ) -> void

        def valid?: -> bool

        def parse: (question_index: Integer)-> Result

        def calculate_question: (Hash[::Symbol | ::String, ::String | ::Float | ::Integer]) -> float

        class InvalidDataError < Error
          def correct_data: -> String
        end
      end
    end

    module PostTaskSatisfaction
      class Parser
        CHOICE_KEYS: Array[String]
        attr_reader choices: Hash[::Symbol | ::String, ::String | ::Float | ::Integer]

        def initialize: (
          choices: Hash[::Symbol | ::String, ::String | ::Float | ::Integer],
        ) -> void

        def valid?: -> bool

        def parse: -> Result

        def calculate_question: (Hash[::Symbol | ::String, ::String | ::Float | ::Integer]) -> float

        class InvalidDataError < Error
          def correct_data: -> String
        end
      end
    end

    module BrandScore
      class Parser
        CHOICE_KEYS: Array[String]
        attr_reader questions: Array[Hash[::Symbol | ::String, ::String | ::Float | ::Integer] | Array[::String | ::Float | ::Integer]]

        def initialize: (
          questions: Array[Hash[::Symbol | ::String, ::String | ::Float | ::Integer] | Array[::String | ::Float | ::Integer]],
        ) -> void

        def valid?: -> bool

        def parse: -> Result

        class InvalidDataError < Error
          def correct_data: -> String
        end
      end
    end

    module Completion
      class Parser
        attr_reader direct_success: Float
        attr_reader indirect_success: Float
        attr_reader failed: Float

        def initialize: (
          direct_success: Float, indirect_success: Float, failed: Float
        ) -> void

        def valid?: -> bool

        def parse: -> Result

        class InvalidDataError < Error
          def correct_data: -> String
        end
      end
    end

    module Engagement
      class Parser
        attr_reader scores: Hash[::Symbol | ::String, ::String | ::Float | ::Integer]
        attr_reader clicks: Array[ClickData]

        def initialize: (
          scores: Hash[::Symbol | ::String, ::String | ::Float | ::Integer],
          clicks: Array[ClickData]
        ) -> void

        def valid?: -> bool

        def parse: -> Result

        class InvalidDataError < Error
          def correct_data: -> String
        end
      end
    end

    class Result
      attr_reader result: Float
      attr_reader label: String
      attr_reader threshold: String

      def initialize: (result: Float, label: String, threshold: String) -> void
    end

    class ClickData
      attr_reader hotspot: Integer
      attr_reader x_pos: Float
      attr_reader y_pos: Float

      def initialize: (x_pos: Float, y_pos: Float, hotspot: Integer) -> void

      def in_hotspot?: -> bool
    end

    VERSION: String
  end
end